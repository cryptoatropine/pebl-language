#//////////////////////////////////////////////////////////////////////////////
#//    Name:       src/pebl-lib/UI.pbl
#//    Purpose:    Contains PEBL functions used for GUI components
#//    Author:     Shane T. Mueller, Ph.D.
#//    Copyright:  (c) 2014 Shane T. Mueller <smueller@obereed.net>
#//    License:    GPL 2
#//
#//
#//
#//     This file is part of the PEBL project.
#//
#//    PEBL is free software; you can redistribute it and/or modify
#//    it under the terms of the GNU General Public License as published by
#//    the Free Software Foundation; either version 2 of the License, or
#//    (at your option) any later version.
#//
#//    PEBL is distributed in the hope that it will be useful,
#//    but WITHOUT ANY WARRANTY; without even the implied warranty of
#//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#//    GNU General Public License for more details.
#//
#//   You should have received a copy of the GNU General Public License
#//   along with PEBL; if not, write to the Free Software
#//   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#//////////////////////////////////////////////////////////////////////////////

#  The functions defined here are available for use in any PEBL program.
#  They are written in PEBL itself, and so are interpreted, but the ease of
#  writing them in PEBL far outweighed the possible speed-up that
#   might be gained by writing them directly in C++.

define MakeButton(label,x,y,win,width)
{

   obj <- MakeCustomObject("button")
   obj.name <- "<CUSTOMOBJECT>"


   if(PropertyExists(win,"bgcolor"))
   {
     col <- win.bgcolor
   } elseif(PropertyExists(win,"color"))
   {
     col <- win.color
   }elseif(PropertyExists(win,"fgcolor")){
     col <- win.fgcolor
   }else {
     col <- MakeColor("grey")
   }

   black <- MakeColor("black")
   button <-MakeCanvas(width,20,col)
   obj.button <- button

   buttonback <- MakeColorRGB(248,248,248)
   font<- MakeFont(gPEBLBaseFont,0,12,Makecolor("grey20"),
                   buttonback,0)
   buttonSideL   <- MakeImage("buttonsideL.png")
   buttonSideR   <- MakeImage("buttonsideR.png")
   buttonMiddle <-  MakeImage("buttonmiddle.png")
   buttonMiddle.zoomX <- (width-4)/buttonMiddle.width
   Draw(buttonMiddle)

   AddObject(buttonMiddle,button)
   AddObject(buttonSideL,button)
   AddObject(buttonSideR,button)


   Move(buttonMiddle,button.width/2,button.height/2)
   Move(buttonSideL,buttonSideL.width/2,button.height/2)
   Move(buttonSideR,button.width-buttonSideR.width/2,button.height/2)
  
   Draw(buttonMiddle)   
   Draw(button)
   obj.win <- win
 

   label <- MakeLabel(label,font)
   ##If the label is bigger than the button, shrink it.
   if(label.width > (button.width-6))
    {
       label.zoomx <- (button.width-6)/(label.width)
    }

   AddObject(label,button)
   Move(label,width/2,button.height/2)
   Draw(label)

   AddObject(button,win)
   
   Move(button,x,y)

   obj.x <- button.x
   obj.y <- button.y
   obj.width<- button.width
   obj.height <- button.height
   obj.clickon <- "PushButton"
   return obj
}


##this is sometimes given two parameters, but the second is ignored.
define PushButton(tmp,click)
{
     button <- tmp.button
     Move(button,button.x+2,button.y+2)
     Draw()
     WaitForMouseButton()#     Wait(100)
     Move(button,button.x-2,button.y-2)
 #    Draw()
}


## xy is the center of the checkbox
##
define MakeCheckBox(label,x,y,win,width)
{

   col <- MakeColor("grey80")
   obj <-MakeButton(label,x,y,win,width)
   back <- obj.button

   font<- MakeFont(gPEBLBaseFont,0,15,MakeColor("black"),MakeColor("white"),0)

   check <- EasyTextBox("",4,4,back,10,12,12)
   AddObject(check,back)

   
   rect <-Rectangle(10,10,14,14,MakeColor("grey65"),0)
   AddObject(rect,back)
   Draw(rect)

   AddObject(back,win)
   Move(back,x+back.width/2,y+back.height/2)
   
   checkbox <- MakeCustomObject("checkbox")

   checkbox.name <- "<CUSTOMOBJECT>"
   checkbox.x <- back.x
   checkbox.y <- back.y
   checkbox.width <- back.width
   checkbox.height <- back.height
   checkbox.back <- back
   checkbox.label <- label
   checkbox.check <- check
   checkbox.state <- 0
   checkbox.clickon <- "clickcheckbox"
   return checkbox
}


define ClickCheckBox(cb,pos)
{

 cb.state <- 1- cb.state
 check <- cb.check
 if(cb.state)
 {
 
   check.text <-" X"
 }else{
   check.text <- ""
 }
 Draw(check)
}


define SetCheckBox(cb,state)
{

 cb.state <- state
 check <- cb.check
 if(cb.state)
 {
 
   check.text <-" X"
 }else{
   check.text <- ""
 }
 Draw(check)
}




define MakeTextEntry(label,x,y,win,width,default,layout)
{

  #layout 1 = left/right centered
  #layout 2 = top/bottom
  #layout 3 = bottom/top
  #layout 4 = ???


   obj <- MakeCustomObject("TextEntry")
   obj.name <- "<CUSTOMOBJECT>"
   obj.value <- default
   
   font<- MakeFont(gPEBLBaseFont,0,12,Makecolor("grey20"),
                   MakeColor("white"),0)

   entry <- MakeTextBox(default+"",font,width,15)
   label <- EasyLabel(label,x+width/2,y+5,win,12)
   obj.entry <- entry
   obj.label <- label
   AddObject(entry,win)
   Move(entry,x,y+15)

   obj.win <- win
 
   obj.x <- x
   obj.y <- y
   obj.width<- width
   obj.height <-27
   obj.clickon <- "GetTextEntryInput"
   obj.inside <- "InsideTB"
   return obj
}


define GetTextEntryInput(obj,xy)
{
   tb <- obj.entry
   obj.value <-   GetInput(tb,"<return>")
   return obj.value
}


define SetTextEntry(obj,value)
{
   tb <- obj.entry
   tb.text <- value
}

## This creates a 'scrolling' textbox.  If the text is too tall for
## the given size, it will add a scrollbar that allows you to see everything
## If scrolling is needed, the text box size is reduced slightly.
define MakeScrollingTextBox(text,x,y,win,fontsize,width,height,linewrap)
{


   obj <- MakeScrollBox([1,2,3], "",x,y,win,fontsize,
                           width,height,1)

   Hide(obj.selection)
   tb <- obj.box

   tb.linewrap <- linewrap ## Should text line wrap?
   obj.linewrap <- linewrap

   ##now, we need to make text into a list.
   SetScrollingText(obj,text,obj.linewrap)
   UpdateScrollbox(obj)
   DrawScrollbox(obj)
   return obj
}

##this sets new text to the scrolling text box. 
##it must do some minimal layout, finding text breaks,
##and so shouldn't be used on every redraw.
define SetScrollingText(obj,text,linewrap)
{

   tb <- obj.box
   tb.linewrap <- linewrap
   ##Now, figure out line breaks of the text.
#   SetEditable(tb,1)
   tb.text <- text
   Draw(tb)   
   index <- 0
   jumps <- []

   textlength <- StringLength(text)
   lines <- []

 
   while(index< textlength)
   {
     ##   Draw()
      cut <- GetTextBoxCursorFromClick(tb,1,20)
      cuttext <- SubString(tb.text,1,cut)

      ##this probably only happens on the very last line.
      if(cut==0)
      {
        cut <- 1
      }

      if(SubString(tb.text,cut+1,1)==CR(1))
      {
         cut <- cut + 1
      }     

      tb.cursorpos <- cut
 #     Draw()
      ##  WaitForAnyKeyPress()

      PushOnEnd(lines,cuttext)

      ##now, do update the textbox text
      index <- index + cut
      tb.text <- SubString(text,index+1,textlength-index)
      tb.cursorpos <- 0
   }

   obj.text <- text
   obj.list <- lines
   obj.numitems <- Length(lines)
   UPdateScrollbox(obj)
}



##Make an easy-to-use (small 300x200) pop-up messagebox function.
define PopupMessageBox(text,win)
{


  boxwidth <- 301
  boxheight <- 201



  if(not IsWindow(win))
  { 
    SignalFatalError("PopupMessageBox(win) needs a window to be specified, not [" + win + "]")
  }


    curmouse <- GetMouseCursorPosition()
   	   
    xpos <- Min([Max([boxwidth/2+5,First(curmouse)]),
                      gVideoWidth-boxwidth/2-5])

    ypos <- Min([Max([boxheight/2+5,Second(curmouse)]),
                      gVideoHeight-boxheight/2-5])
   

   bgcol <- win.BGCOLOR

   popup  <- MakeCanvas(boxwidth,boxheight,MakeColor("grey60"))
   Move(popup,xpos,ypos)
   AddObject(popup,win)
   
   bg <- Rectangle(boxwidth/2,boxheight/2,boxwidth-2,boxheight-2,bgcol,1)
   AddObject(bg,popup)
   box <- EasyTextBox(text,10,20, popup,13,boxwidth-20,boxheight-50)
   Draw(popup)
   Hide(bg)
   Hide(box)
     

   ok <- MakeButton("OK",popup.x,popup.y+popup.height/2-18,win,50)
   Draw()
   ShowCursor(1)
   WaitForClickOnTarget([ok],[1])
   PushButton(ok,[0,0])

   RemoveObject(popup,win)
   Draw()

}



##Make an easy-to-use (small 300x200) pop-up messagebox function.
define PopUpEntryBox(text,win,xy)
{
  boxwidth <- 301
  boxheight <- 101
  if(not IsWindow(win))
  { 
    SignalFatalError("PopupEntryBox(win) needs a window to be specified, not [" + win + "]")
  }


    curmouse <- xy
   	   
    xpos <- Min([Max([boxwidth/2+5,First(curmouse)]),
                      gVideoWidth-boxwidth/2-5])

    ypos <- Min([Max([boxheight/2+5,Second(curmouse)]),
                      gVideoHeight-boxheight/2-5])
   

   bgcol <- win.BGCOLOR

   popup  <- MakeCanvas(boxwidth,boxheight,MakeColor("grey60"))
   Move(popup,xpos,ypos)
   AddObject(popup,win)
   
   
   bg <- Rectangle(boxwidth/2,boxheight/2,boxwidth-2,boxheight-2,bgcol,1)
   AddObject(bg,popup)
   font <- MakeFont(gPEBLBaseFont,0,13,MakeColor("black"),bgcol,0)
   box <- MakeTextBox(text,font,boxwidth-20,boxheight-50)
   Move(box, 10,20)
   AddObject(box,popup)


   Draw(popup)
   Hide(bg)
   Hide(box)
   entrybox <-  EasyTextBox("",10,boxheight-25, popup,13,boxwidth-20,20)
   
   Draw()
   resp <- GetInput(entrybox,"<return>")

   RemoveObject(popup,win)
#   Draw()
   return resp
}


define MakePullDown(opts, x,y,win,fontsize,
                   width,selected)
{

   gWinDummy <- MakeCustomObject("dummy")
   gWinDummy.name <- "<CUSTOMOBJECT>"
   gWinDummy.x <- gVideoWidth/2
   gWinDummy.y <- gvideoHeight/2
   gWinDummy.width <- gVideoWidth
   gWinDummy.height <- gVideoheight
   gWinDummy.win <- win

   obj <- MakeCustomObject("pulldown")
   obj.name <- "<CUSTOMOBJECT>"
   ##we need the baseline font size.
   basefont <- MakeFont(gPEBLBaseFont,0,fontsize,MakeColor("black"),MakeColor("white"),0)
   tmplab <- MakeLabel("X",baseFont)
   obj.lineheight <- tmplab.height

   tb <- MaketextBox("",basefont,width,obj.lineheight)
   tb.linewrap <- 0

   AddObject(tb,win)
   Move(tb,x,y)

   obj.outline <- Rectangle(tb.x+width/2,tb.y,width+2,tb.height+2,MakeColor("grey70"),0)
   AddObject(obj.outline,win)
   
   Move(tmplab,x+tb.width/2,y+tb.height/2)

   selection <- Rectangle(tmplab.x,tmplab.y,
                          tb.width,tmplab.height,MakeColor("grey55"),0)
   AddObject(selection,win)

   obj.listoffset <- 0        ##how many items at the beginning of the list to skip    
   obj.box <- tb
   obj.list <- opts
   obj.selected <- selected  ##This is the list index
   obj.open <- 0


   numavail <- Floor((gVideoHeight-y-5)/obj.lineheight)
   obj.maxitems <- Bound(numavail,4,15)
   obj.numitems <- Length(obj.list)
   obj.selection <- selection

   thumb <- MakeImage("thumb.png")
   up <- MakeImage("up.png")
   obj.up <- up
   obj.down <- MakeImage("down.png")
   obj.thumb <- thumb
   obj.pull <- MakeImage("pull.png")
   obj.win <- win

   obj.gutter <- Rectangle(tb.x+tb.width-6,tb.y+tb.height/2,
                           up.width,tb.height-10,MakeColor("grey65"),1)
   AddObject(obj.gutter,win)
   Hide(obj.gutter)

   Hide(obj.up)
   Hide(obj.down)
   Hide(obj.thumb)
   Hide(obj.pull)
   AddObject(obj.pull,win)
   AddObject(obj.up,win)
   AddObject(obj.down,win)
   AddObject(obj.thumb,win)
   Move(obj.pull,tb.x+tb.width-7,tb.y+6)
   Move(obj.up,tb.x+tb.width-6,tb.y+10)
   Move(obj.down,tb.x+tb.width-6,tb.y+tb.height-10)
   Move(obj.thumb,tb.x+tb.width-6,tb.y+10)
   if(obj.numitems>0)
   {
     obj.selectedtext <- Nth(obj.list,obj.selected)
   }else{
     obj.selectedtext <- ""
   }

   obj.x <-x
   obj.y <-y
   obj.width <- width
   obj.height <- obj.lineheight

   obj.clickon <- "pulldown"
   obj.inside <- "insideTB"

   ##this is the largest the offset can be:
   obj.maxoffset <- Max([0,obj.numitems-obj.maxitems])
   obj.toomany <-obj.numitems>obj.maxitems

   obj.LastUpdatetime<-GetTime()
   DrawPullDown(obj)

  return obj
}


define InsideTB(xy,object)
{
     x <- First(xy)
     y <- Second(xy)
     xlow <- object.x
     xhigh <- object.x+object.width
     ylow <- object.y
     yhigh <- object.y+object.height
     inside <- (x >= xlow) and (x  <= xhigh) and (y >= ylow) and (y <= yhigh)
 return inside
}



##This handles clicks on the pulldown.

define PullDown(obj,xy)
{
 ## To begin with, the pulldown is closed.
 ##re-add the textbox to the window so it shows up on top:

 AddObject(obj.box,obj.win)
 y <- Second(xy)
 tb <- obj.box


 ##open it up and draw it:
 obj.open <- 1
 DrawPulldown(obj)
 Draw()

 if(obj.toomany)
 {
  targs <- [gWinDummy,obj.box,obj.gutter,obj.up,obj.down]
  ids <-  [0,4,1,2,3]

 }else{
  targs <- [gWinDummy,obj.box]
  ids <- [0,4]
 }

  cont <- 1
  while(cont)
   {
    resp <- WaitForClickOntarget(targs,ids)
    xy <- gClick
    ##Now, it is open.  We need process the click.

    if(resp==2 or (obj.toomany and Third(xy)==4))
     {
       ##up!
       obj.listoffset <- Bound(obj.listoffset-1,0,obj.listoffset+obj.maxitems)
       obj.listoffset <- Bound(obj.listoffset,0,obj.maxoffset)
       obj.selected <- Bound(obj.selected,obj.listoffset+1,obj.listoffset+obj.maxitems)
       obj.selected <- Bound(obj.selected,1,obj.numitems)

    }elseif(resp==3 or (obj.toomany and Third(xy)==5))
    {
      ##down button
       obj.listoffset <- Bound(obj.listoffset+1,0,obj.listoffset+obj.maxitems)
       obj.listoffset <- Bound(obj.listoffset,0,obj.maxoffset)
       obj.selected <- Bound(obj.selected,obj.listoffset+1,obj.listoffset+obj.maxitems)
       obj.selected <- Bound(obj.selected,1,obj.numitems)

    }elseif(resp==1)
    {

    band <- obj.gutter
    prop <- (Second(xy) - (band.y - band.height/2))/band.height
    obj.listoffset <- Floor(prop*(obj.maxoffset+1))
    obj.listoffset <- Bound(obj.listoffset,0,obj.listoffset+obj.maxitems)
    obj.listoffset <- Bound(obj.listoffset,0,obj.maxoffset)

    obj.selected <- Bound(obj.selected, obj.listoffset+1,obj.listoffset+obj.maxitems)
    obj.selected <- Bound(obj.selected,1,obj.numitems)

    if(1)
      {
 	  RegisterEvent("<MOUSE_MOVEMENT>",1,1 ,"<TRUE>","UPDATECAPTUREDScrollboxTHUMB", [obj,"mousemove-0"])
 	  ##devicetype,		 ##interface
	  ##value		 ##test
	  ##fname		 ##parameter
	  RegisterEvent("<MOUSE_BUTTON>",1,1,"<EQUAL>","UPDATECAPTUREDScrollboxTHUMB", [obj,"mousebutton-1"])
          RegisterEvent("<MOUSE_BUTTON>",1,0,"<EQUAL>","CLEARScrollboxTHUMBCAPTURE", [obj,"mousebutton-0"])

          out <-  StartEventLoop()

          ClearEventLoop()

       }


     }elseif(resp==4)
     {
       ##click on the textbox somewhere.

      obj.selected <- Min([Floor((Second(xy) - tb.y)/obj.lineheight)+1,obj.numitems])+ obj.listoffset
      ##this is a normal clck on the box.  update and close the box.
       obj.selectedtext <- Nth(obj.list,obj.selected)
 
     cont <- 0

     }else{

      ## click outside; abort and close
      obj.open <- 0
      cont <- 0
     }


    ##guard against empty lists:  
    if(obj.selected==0)
    {
       obj.selectedtext <- ""
       obj.open <-0
 
     }
     DrawPulldown(obj)
     Draw()  
    ##After we draw it, wait a little bit so you can see the selection before
    ##the pulldown rolls up.
     Wait(100)
    }


     obj.open <-0
     DrawPulldown(obj)

     return obj.selected
}


define DrawPulldown(obj)
{

  tb <- obj.box
  outline <- obj.outline
  ##do the final draw-updating here:
  ##Draw a closed box here:
  if(obj.open==0)
   {

     Hide(obj.up)
     Hide(obj.gutter)
     Hide(obj.thumb)
     Hide(obj.down)
     Hide(outline)
     tb.height <- obj.lineheight
     selection <- obj.selection
     selection.y <- tb.y + obj.lineheight/2
     if(obj.numitems>1)
       {
        Addobject(obj.pull,obj.win)#readd to window for z-order
        Show(obj.pull)
	
	pull<-obj.pull
	pull.y <- tb.y+pull.height/2+2
       }

       if(obj.selected==0 or obj.numitems==0)
       {
        tb.text <- ""
       }else{
        tb.text <- " "+Nth(obj.list,obj.selected)
       }
    }else{
     ###############################
     ##Draw an open box here


     Show(outline)
     Hide(obj.pull)

     tb.height <- Min([obj.maxitems,obj.numitems]) * obj.lineheight
     obj.selected <- Bound(obj.selected,1,obj.numitems)

 
    ##We need to make sure the selected object is not off the screen
    if(obj.selected > obj.maxitems + obj.listoffset)
    {
      obj.listoffset <- obj.selected - obj.maxitems
    }
 

     if(Length(obj.list)==0)
      {    
       tb.text <- ""
       obj.selectedtext <- ""

      }else{
      tb.text <- MakeTextList(obj.list,obj.listoffset," ")
      obj.selectedtext <- Nth(obj.list,obj.selected)

     }
    
    selection <- obj.selection
    Addobject(selection,obj.win)#readd to window for z-order
    Show(selection)
    selection.y <- tb.y +(obj.selected -obj.listoffset -.5)* obj.lineheight


    if(obj.toomany)
    {
      up <- obj.up
      down <- obj.down
      gutter <- obj.gutter
      thumb <- obj.thumb      

     Addobject(obj.gutter,obj.win)#readd to window for z-order
     Addobject(up,obj.win)#readd to window for z-order
     Addobject(down,obj.win)#readd to window for z-order  
     Addobject(thumb,obj.win)#readd to window for z-order
     Show(obj.gutter)
      Show(up)
      Show(down)
      Show(thumb)

      gutter.height <- tb.height-18
      gutter.y <- tb.y+tb.height/2
      down.y <- tb.y+tb.height-10
      upsize <- 22
      ##calculate where the thumb should be, based on offset.

      prop <- obj.listoffset / obj.maxoffset
      thumb.y <- gutter.y -gutter.height/2+upsize + 
                   prop * (gutter.height-upsize*2)
     }
    
    }
  Show(outline)
  outline.height<-tb.height+2
  outline.y <- tb.y+tb.height/2
  AddObject(outline,obj.win)
  obj.height <- tb.height
  Draw()
}



##This is used to change the list to the pulldown
define UpdatePulldown(obj,newlist)
{

   tb <- obj.box
   ###add the new list; update some stuff.
   obj.list <- newlist
   obj.numitems <- Length(newlist)
   obj.maxoffset <- Max([0,obj.numitems-obj.maxitems])
   obj.toomany <- obj.numitems>obj.maxitems

   ##to start, figure out what the current selected item is.
   ##let's make sure it is legal.
   selected <- obj.selected

   if(obj.selected<=(obj.numitems) and obj.selected>0)
    {
      selectedtext <- Nth(obj.list,obj.selected)
    }else{
      obj.selected <- Bound(obj.selected,1,obj.numitems)
      selectedtext <- ""
    }



   ##if a text entry was selected before, select it again.
   index <- 1
   selected <- 1
   loop(i,obj.list)
   {

      
     if (i == selectedtext)
     {
     
        selected <- index
	break
     }
     index <- index + 1
   }

   obj.selected <- selected

   DrawPullDown(obj)
}

define MakeTextList(list,listoffset,prebuffer)
{ 

   text <- ""
   sep <- ""

   loop(i,Sequence(1+listoffset,Length(list),1))
   {
     text <- text +sep + prebuffer+ Nth(list,i)
     sep <- CR(1)
   }
  return text
}



##this makes a scrollable text box enabling selection from a set of items.

define MakeScrollBox(opts, header,x,y,win,fontsize,
                   width,height,selected)
{

   bgcol <-MakeColor("grey90")
   outlinecol <-MakeColor("grey65")
   obj <- MakeCustomObject("scrollbox")
   obj.name <- "<CUSTOMOBJECT>"


   obj.basefont <- MakeFont(gPEBLBaseFont,0,fontsize,MakeColor("black"),MakeColor("white"),0)
   head <- MakeLabel(header,obj.baseFont)
   
   obj.bg <- Rectangle(x+width/2,y+height/2,width,height,bgcol,1)
   obj.outer <- Rectangle(x+width/2,y+height/2,width,height,outlinecol,0)


   AddObject(obj.bg,win)
   AddObject(obj.outer,win)
   AddObject(head,win)


   Move(head,x+width/2,y+head.height/2)
   obj.header <- head

   tb <- MakeTextBox("",obj.basefont,width-32,50)
   tb.linewrap <- 0
   obj.lineheight <-tb.lineheight

   ##we need to figure out how high to make it.
   maxitems <- Floor(height/obj.lineheight)-2
   if(maxitems<3)
   {
     SignalFatalError("Too little vertical room for scrollbox. Specified font needs at least ["+obj.lineheight*6+"] pixels  of height")
   }
   obj.maxitems<-maxitems
   tb.height <- obj.lineheight*obj.maxitems
   AddObject(tb,win)
   Move(tb,x+10,y+obj.lineheight+1)

   obj.outline <- Rectangle(tb.x+tb.width/2,  tb.y+tb.height/2,
                            tb.width+2,tb.height+2,
                            MakeColor("grey22"),0)

   AddObject(obj.outline,win)
  

   selection <- Rectangle(tb.x+tb.width/2,tb.y+obj.lineheight/2,
                          tb.width,obj.lineheight,MakeColor("grey55"),0)
   AddObject(selection,win)



   obj.listoffset <- 0        ##how many items at the beginning of the list to skip    
   obj.box <- tb
   obj.list <- opts
   obj.selected <- selected  ##This is the list index
   obj.numitems <- Length(obj.list)
   obj.selection <- selection


   obj.maxoffset <- Max([0,obj.numitems-obj.maxitems])

   thumb <- MakeImage("thumb.png")
   up <- MakeImage("up.png")
   obj.up <- up
   obj.down <- MakeImage("down.png")
   obj.thumb <- thumb

   obj.win <- win


    band <- Rectangle(tb.x+tb.width+12,tb.y+tb.height/2,
                       up.width,tb.height-10,MakeColor("grey75"),0)
    obj.gutter <- band
    AddObject(obj.gutter,win)


   AddObject(obj.up,win)
   AddObject(obj.down,win)
   AddObject(obj.thumb,win)


   Move(obj.up,band.x,band.y-band.height/2)
   Move(obj.down,band.x,band.y+band.height/2)
   Move(obj.thumb,band.x,band.y)

   if(Length(obj.list)==0)
   {
    obj.selected <- 1
    obj.selectedtext <- ""
   }else {
    obj.selected <- Bound(obj.selected,1,obj.numitems)
    obj.selectedtext <- Nth(obj.list,obj.selected)
  }

   obj.x <-x
   obj.y <-y
   obj.width <- width
   obj.height <- height

   obj.clickon <- "clickonscrollbox"
   obj.toomany <-Length(obj.list)>obj.maxitems

   ##this is the largest the offset can be:
   if(not obj.toomany) 
    {
     Hide(thumb)      
    }

  obj.maxoffset <- Max([0,obj.numitems-obj.maxitems])
  obj.inside <- "insideTB"
  obj.lastupdatetime <- GetTime()
  UpdateScrollbox(obj)
  DrawScrollbox(obj)
  return obj
}


define UpdateScrollbox(obj)
{
##   This recalculates aspects of the scrollbox if you change the list.
   obj.numitems <- Length(obj.list)
   obj.maxoffset <- Max([0,obj.numitems-obj.maxitems])

   obj.toomany <- (obj.numitems > obj.maxitems)
   if(obj.toomany)
   {
    Show(obj.thumb)
   }else{
    Hide(obj.thumb)
  }


   ##redo the offset in case we lost items.
   obj.listoffset <- Bound(obj.listoffset,0,obj.maxoffset)


}


##this draws the current state of the scrollbox.  
## It should be called directly whenever things like the scrollbar, 
## offset, selected item are changed, but not when the list changes.
##the only material side effect it can have is changing selected, which will update
##to ensure it stays within bounds.

define DrawScrollBox(obj)
{
   box <- obj.box

   if(obj.numitems==0)
    {
      box.text <- ""
      min <- 1
      max <- 1

    }else{
      ##we need to extract the list to draw.

      ##find the first item.  It should be >=1,
      ##> listoffset, but <= maxoffset
      ##min cannot be bigger than max offset+1
      ##i.e., if maxoffset is 0, min is 1
      
      min <- Bound(obj.listoffset+1,1,obj.maxoffset+1)

      ##max cannot be smaller than min, or bigger than maxoffset+length
      max <- Bound(obj.listoffset+obj.maxitems,min,obj.listoffset+obj.maxitems+obj.numitems)

      ##, or listlength
      max <- Bound(max,1,obj.numitems)
      listtodraw <- SubList(obj.list,min,max)
      box.text <- MakeTextList(listtodraw,0," ")
    }


    obj.selected <- Bound(obj.selected,min,max)


   selection <- obj.selection
   selection.y <- box.y + (obj.selected-obj.listoffset-.5)*obj.lineheight
   prop <- obj.listoffset/obj.maxoffset
   band <- obj.gutter
   cheat <- 42
   thumb <- obj.thumb
   thumb.y <- band.y - (band.height-cheat)/2 + prop*(band.height - cheat)

if(obj.numitems <= obj.maxitems)
{
   Hide(obj.thumb)
}else{
   Show(obj.thumb)
}
}

define ClickOnScrollbox(obj,click)
{


  y <- Second(click)
  box <- obj.box

  retval <- "<adjust>"

  button <- Third(click)

  if(Inside(click,obj.up) or button==4)
  {


   if(button==4)
   {
     jump <- -3
   }else{
     jump <- -1
   }
    ##adjust the offset here
    obj.listoffset <- Max([0,obj.listoffset+jump])
    obj.selected <- Min([obj.selected,obj.listoffset+obj.maxitems])

  }elseif(Inside(click,obj.down) or button==5)
  {
   if(button==5)
   {
     jump <- 3
   }else{
     jump <- 1
   }

    obj.listoffset <- Bound(obj.listoffset+jump,0,obj.maxoffset)

    obj.selected <- Bound(obj.selected, obj.listoffset+1,obj.listoffset+obj.maxitems)

  }elseif(Inside(click,box))
    {

    ##we clicked in the box, possibly changing the selection.
    selected <- Floor((y - box.y)/obj.lineheight)+1+obj.listoffset
    selected <- Bound(selected,obj.listoffset+1,obj.numitems)
    
    obj.selected <- selected
    retval <- "<select>"

  }elseif(Inside(click,obj.gutter))
  {


    band <- obj.gutter
    prop <- (y - (band.y - band.height/2))/band.height
    obj.listoffset <- Floor(prop*(obj.maxoffset+1))
    obj.selected <- Bound(obj.selected, obj.listoffset+1,obj.listoffset+obj.maxitems)

    if(1)
      {


 	  RegisterEvent("<MOUSE_MOVEMENT>",1,1 ,"<TRUE>","UPDATECAPTUREDScrollboxTHUMB", [obj,"mousemove-0"])
 	  ##devicetype,		 ##interface
	  ##value		 ##test
	  ##fname		 ##parameter
	  RegisterEvent("<MOUSE_BUTTON>",1,1,"<EQUAL>","UPDATECAPTUREDScrollboxTHUMB", [obj,"mousebutton-1"])
          RegisterEvent("<MOUSE_BUTTON>",1,0,"<EQUAL>","CLEARScrollboxTHUMBCAPTURE", [obj,"mousebutton-0"])

          out <-  StartEventLoop()
          ClearEventLoop()
      }       
  }
  DrawScrollBox(obj)  

 return retval ## we should return something that says what kind of click this was.
}

define UpdateCapturedScrollBoxThumb(obj,p)
{
     mousexy <- GetMouseState()

   time<- GetTime()
   if((time-obj.lastUpdatetime) > 10)
    {

     if(Third(mousexy)==0)
     {
      gKeepLooking <- 0
     }

     y <- Second(mousexy)
     band <- obj.gutter
     prop <- (y - (band.y - band.height/2))/band.height

     obj.listoffset <- Bound(Round(prop*(obj.maxoffset)),0,obj.maxoffset)
     obj.selected <- Bound(obj.selected,obj.listoffset+1,obj.listoffset+obj.maxitems)

     obj.LastUpdatetime <- time

     DrawScrollbox(obj)
     Draw()

    }
 
}


##this supposedly gets called on a mouse release event?
##it should also get called when you leave the window...
define ClearScrollboxThumbCapture(obj,p)
{
	gKeepLooping <- 0
	Draw()
}



define MakeMenu(header,x,y,win,fontsize,width,subitems,functions)
{
   obj <- MakeCustomObject("menu")
   obj.name <-"<CUSTOMOBJECT>"

   headitem <- MakeMenuItem(header,x,y,win,fontsize,width,"opensubmenus")
   

   obj.head <- headitem
   obj.fontsize <- fontsize
   obj.height <- headitem.height

    obj.width <- headitem.width+15
    obj.x <- x
    obj.y <- y
    obj.clickon <- "OpenSubMenus"

    obj.show <- "Showmenu"
    obj.hide <- "HideMenu"
    obj.win <- win
    obj.inside <- "INSIDEMENU"

    obj.subitems <- subitems
    obj.functions <- functions

    return obj
}


define OpenSubMenus(obj,xy)
{
  head <- obj.head
  fg<-head.fg
  bg <- head.bg
#  bg <- MakeColor("green")
  space <- 8

  newy <- obj.y + obj.height



   winDummy <- MakeCustomObject("dummy")
   winDummy.name <- "<CUSTOMOBJECT>"
   winDummy.x <- gVideoWidth/2
   winDummy.y <- gvideoHeight/2
   winDummy.width <- gVideoWidth
   winDummy.height <- gVideoheight

  menuback <- Rectangle(obj.x,newy+obj.height*(Length(obj.subitems))/2,
                        obj.width,(obj.height+space)*(Length(obj.subitems)),bg,1)
  AddObject(menuback,obj.win)			

  widths <- []
  submenus <- [windummy]
  newy <- newY + space/2
  loop(i, Transpose([obj.subitems,obj.functions]))
   {
      item <- MakeMenuItem(First(i),
                        obj.x,newy,obj.win,
                        obj.fontsize, obj.width,Second(i))


      PushOnEnd(submenus,item)
      PushOnEnd(widths,item.width)
      newY <- newY + obj.height+space
   }

  menuback.width <- Max(widths)+15
  MoveCorner(menuback,obj.x,obj.y+obj.height)
  Draw()
  resp <- WaitForClickOnTarget(submenus,Sequence(1,Length(submenus),1))
  if(resp>1)
  {
  obj <- Nth(submenus,resp)
  CallFunction(obj.clickon,[obj,gClick])
  ##after exiting, the menu should disappear.  
  }
}

##A menu item is just a set of labels with solid backs that launch
##  something when the get clicked

define MakeMenuItem(text,x,y,win,fontsize, width,function)
{
    menuback <- MakeColor("grey20")
    menuFG <- MakeColor("grey90")

    obj <- MakeCustomObject("menuitem")
    obj.name <- "<CUSTOMOBJECT>"

    obj.bg <- menuback
    obj.fg <- menuFG

    font<- MakeFont(gPEBLBaseFont,0,fontsize,menufg,menuback,0)
    label <- MakeLabel(text,font)
    Move(label,x+label.width/2+4,y)
    AddObject(label,win)
    label.y <- y + label.height/2
    obj.width <- Max([width,label.width])
    bg  <- Rectangle(x+(obj.width+6)/2,label.y,obj.width+6,label.height,menuback,1)
   
    AddObject(bg,win)
    AddObject(label,win)

    obj.font <- font
    obj.width <-bg.width    
    obj.text <- text
    obj.label <- label
    obj.back <- bg
    obj.height <- label.height

    obj.x <- x
    obj.y <- y

    obj.clickon <- function
    obj.move <- "MoveMenu"
    obj.show <- "Showmenu"
    obj.hide <- "HideMenu"
    obj.win <- win
    obj.inside <- "INSIDEMENU"

    return obj
      
}


define ClickOnMenu(obj,xy)
{
   CallFunction(obj.clickon,[obj,xy])
   CallFunction(obj.hide,[obj,xy])  
}


##This is offset from upper left corner
define InsideMenu(xy,object)
{

     x <- First(xy)
     y <- Second(xy)
     xlow <- object.x
     xhigh <- object.x+object.width
     ylow <- object.y
     yhigh <- object.y+object.height
     inside <- (x >= xlow) and (x  <= xhigh) and (y >= ylow) and (y <= yhigh)

     return inside
}
