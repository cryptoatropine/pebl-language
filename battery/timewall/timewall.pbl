#####################################################
## PEBL  Time Wall, Version 0.1
##        
## As described by  Jerison, Crannell, & Pownall,(1957), and 
##    Jerison and Arginteanu (1958), as reported by 
##     Test 18 of the  UTC test battery.
##
## Jerison, H. H., C. W. Crannell, and 0. Pownall, 1957, Acoustic Noise and
## Repeated Time Judgements in a Visual Movement Prroection Task, (WAUC-IR-b7-
## 54), Wright Air Development Center, Wright-Patterson Air Force Base, Ohio.
## 
## Jerison, H. J. and J. Arginteanu, 1958, Time Judgements, Acoustic Noise, and
## Judgement Drift, (WADC-TR-57-454) Wright Air Development Center, Wright-
## Patterson Air Force Base, Ohio (AJ-130963).
##
## Perez,  W. A., Masline, P. J., Ramsey, E. G. and Urban, K. E. (1984).
##  UNIFIED TRI-SERVICES COGNITIVE PERFORMANCE  ASSESSMENT BATTERY: 
##  REVIEW AND METHODOLOGY, DTIC Document #ADA181697
##  http://stinet.dtic.mil/oai/oai?verb=getRecord&metadataPrefix=html&identifier=ADA181697
##
##
## Version 0.1 (c) 2008 Shane T. Mueller
## smueller@obereed.net
##
#####################################################

define Start(p)
{


  parpairs <- [   ["numTrials", 20 ],       #Number of trials
   ["feedback", 1 ],      #Whether or not to give feedback
   ["mintime", 2000  ],     #Minimum transit time
   ["maxtime", 10000],        #Maximumu transit time
   ["spaceheight",600],
   ["spacewidth",800],
   ["bgcol","lightblue"],
   ["wallcol","darkred"], 
   ["targcol","darkgreen"]  ]  

  gParams <- CreateParameters(parpairs,gParamFile)

  numTrials <- gParams.numtrials           #Number of trials
  feedback <- gParams.feedback             #Whether or not to give feedback
  mintime <- gParams.mintime           #Minimum transit time
  maxtime <- gParams.maxtime         #Maximumu transit time
  gSleepEasy <- 1
  gWin <- MakeWindow("black")


   if(gSubNum+""=="0")
   {
      gSubNum <- GetSubNum(gWin)
    }

  ##Hide the mouse:
  Showcursor(0)

  gFileOut <- GetNewDataFile(gSubNum,gWin,"timewall","csv",
                "subnum,trial,targtime,resptime,acc,shortlong")

inst <- "This is an experiment to see how well you can estimate the speed of a moving square target.  The target will always start at the top of the screen and descend at a constant rate toward the bottom.  After the target is two-thirds of the way down, it    will pass behind a wall and become invisible.    Your task is to press a button at the exact moment the moving target would pass through the notch marked at the very bottom of the display.  In making this judgement, you are not to count or use any other rhythm method to facilitate your judgement.     Instead, follow the target with your eyes and imagine it continuing straight down behind the wall to the notch. After you have pressed the button, you will receive feedback as to where the target actually was and whether you over or underestimated the time interval.   When you are ready, press a key on the keyboard and the next target shall emerge from the top.   The task continues for "+numtrials + " trials.  

Press any key to begin."

  instruct <- EasyTextBox(inst, 50,50,gWin,18,gVideoWidth-100,400)
  Draw()
  WaitForAnyKeyPress()
  Hide(instruct)
   
  bgcol <- MakeColor(gParams.bgcol)
  wallcol <- MakeColor(gParams.wallcol)
  targcol <- MakeColor(gParams.targcol)

  ##let's fix the size of the task to be 800x600, regardless of screen size.

  gSpacewidth <- gParams.spacewidth
  gSpaceheight <- gParams.spaceheight

  bg  <- Rectangle(gVideoWidth/2,gVideoHeight/2,
                   gSpacewidth,gSpaceheight,bgCol,1)
  AddObject(bg,gWin)


  gWallheight <- Ceiling(gSpaceHeight*.333)
  #Position of wall on screen
  gWallpos    <- gVideoHeight/2 + gSpaceheight/2 -gWallheight


  gStartY <- gVideoHeight/2-gSpaceHeight/2

  gTarg <- Square(gVideoWidth/2,4,8,targcol,1)
  wall <- Rectangle(gVideoWidth/2,
  gVideoHeight/2 + gSpaceHeight/2-gWallheight/2,
      gSpacewidth, gwallheight,wallcol,1)

  notch <-Square(gVideoWidth/2,gVideoHeight/2+gSpaceHeight/2-4,8,bgcol,1)

  gFeedback <- EasyLabel("",gVideoWidth/2,gVideoHeight/2-gSpaceheight/2+50,gWin,28)
  Hide(gFeedback)

  AddObject(gTarg,gWin)
  AddObject(wall,gWin)
  AddObject(notch,gWin)

  Draw()



  trial <- 1
  while(trial <= numtrials)
   {


    res <-   Trial()
    targ <- First(res)
    resp <- Nth(res,2)


  msg <- "[Trial " + trial + " of " + numtrials + "] " 
  ##Give positive feedback if within 5%
  acc <- Abs(targ - resp)/targ

 if(feedback)
   {
    if(acc < .05)
     {
       msg <- msg+"Great! "

     } elseif( First(res) < Nth(res,2))
     {
        msg <- msg+"Too Long: "    
     } else{
       msg <- msg+"Too short: "
    }
       msg <-  msg + "  " + Round(resp/1000,2) + "s for " +  Round(targ/1000,2) + "s"
   }

   gFeedback.text <- msg
   shortlong <-  Sign(resp-targ)
   Show(gFeedback)
   Draw()
   Print(gFeedback)
   PrintProperties(gFeedBack)
  FilePrint(gFileOut,gSubNum + "," + trial +"," + targ + "," + resp + "," + acc +
                      "," + shortlong)
  WaitForAnyKeyPress()
  Hide(gFeedback)
  trial <- trial + 1
  }  
 
  instruct.text <- "Thank you for participating.  Press any key to exit"
  Show(instruc)
  Draw()
  WaitForAnyKeyPress()
  FileClose(gFileOut)
}




define Trial()
{
   Show(gTarg)  

   ##Compute how long the target should take to reach the cutout:

   traveltime <- (Random()*8+2)*1000
   start <- GetTime()
   endtime <- start + traveltime
   disappeartime <- start + traveltime * .66667   

   moverate <- gSpaceHeight/traveltime

   time <- start
   
   while(time < disappeartime)
   {

     time <- GetTime()
     ypos <- gStartY+(time - start)* moverate
     gTarg.y <- ypos
     Draw()
     Wait(10)

   }
   Hide(gtarg)
   Draw()
   x <-  WaitForAnyKeyPress()
   est <- GetTime()
   return [traveltime, (est-start)]

}
