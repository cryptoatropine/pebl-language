##  PEBL Go-Nogo task
##  Designed after method described in:
##  Bezdjian, S. Baker, L. A., Lozano, D. I & Raine, A. (2009).
##    Assessing inattention and impulsivity in children during the Go/NoGo task
##    Br J Dev Psychol. 2009 June 1; 27(2): 365â€“383. 
##    doi: 10.1348/026151008X314919.
##    http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2757760/
##
##  Croation translation (HR) By Silvija Rucevicgon

define Start(p)
{
  ##default values to use if .par file is not found
  parpairs <- [["reps",32], ##Number of repetitions of P/R blocks (with trials shuffled)
               ["isi",1500], ##Time between stimuli
               ["numP", 4],  ##Number of 'p' trials per block
	       ["numR", 1]]  ##Number of 'R' trials per block

 Print(parpairs)
 gParams <- CreateParameters(parpairs,gParamFile)

 reps <-gParams.reps   ##number of repetitions of the PPPPR design
 gisi <- gParams.isi  ##inter-stimulus interval
 
  GetStrings(gLanguage)

  gWin <- MakeWindow("black")

  gSleepEasy <- 1

  ShowCursor(0) 

   ##Get subject code if we need to:    
   if(gSubNum+""=="0")
    {
	  gSubNum <- GetSubNum(gWin)
    }



   gFileOut <- GetNewDataFile(gSubNum,gWin,"gonogo","csv",
 "subnum,block,type,correctresponse,trial,choice,x,y,stim,present,response,responded,starttime,rt")

   gPooledFileOut <- FileOpenAppend("data/gonogo-pooled.csv")
   gSumFileOut <-GetNewDataFile(gSubNum,gWin,"gonogo-report","txt","")

   gLog <- FileOpenAppend("data/gonogo-log.csv")
   gPooledSummary <- FileOpenAppend("data/gonogo-all.csv")
   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",GONOGO,INITIATED") 

  ##Keep track of some data
  gBlockNums <- []
  gRTs <- []
  gErrors <- []
  gStim <- []
  gResponded <- []

   design <- Merge(Repeat("P",gParams.numP),
                  Repeat("R",gParams.numR))

  practice <-  Shuffle(RepeatList(design,2))

  gBlock <- 0
  MessageKeyBox(gInst1)
  CountDown(gWin)
  FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",GONOGO,ROUND1 Start") 
  DoBlock(practice,"P","practice")

  #The stimuli are the same for both blocks of trials.
  stim <- Shuffle(RepeatList(design,reps))

 
 #Condition 1 is the 'P-Go' condition, with 160 trials  
  gBlock <- 1
  MessageKeyBox(gInst2)
  CountDown(gWin)
   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",GONOGO,ROUND2 Start") 
  DoBlock(stim,"P","test") 
  stim <- Shuffle(stim)

##Do a second practice block 


 gBlock <- 2
 MessageKeyBox(gInst3)
 CountDown(gWin)
   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",GONOGO,ROUND3 Start") 
 DoBlock(practice,"R","practice") 


 #Condition 2 is the R-Go condition  
 gBlock <- 3
 MessageKeyBox(gInst2)
 CountDown(gWin)
   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",GONOGO,ROUND4 Start") 
 DoBlock(stim,"R","test") 


   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",GONOGO,DONE") 
  ##We want to report:
  ##P-go errors (round 1)
  ##R-go errors (round 2) 
  ##R-nogo errors (round 1)
  ##P-nogo errors (round 2)

  ## P-go rt (round 1)
  ## R-go RT (round 2)

  round1<- Match(gBlockNums,1)
  err1 <- Filter(gErrors,round1)
  rt1 <- Filter(gRTs,round1)
  stim1 <- Filter(gStim,round1)
  resp1 <- Filter(gResponded,round1)

  round2<- Match(gBlockNums,3)
  err2 <- Filter(gErrors,round2)
  rt2 <- Filter(gRTs,round2)
  stim2 <- Filter(gStim,round2) 
  resp2 <- Filter(gResponded,round2)

  statserr1 <- SummaryStats(err1,stim1)
  statserr2 <- SummaryStats(err2,stim2)

  ##RT should only be aggregated for actual responses.
 
  rt1r <- Filter(rt1,resp1)
  stim1r <- Filter(stim1,resp1)

  rt2r <- Filter(rt2,resp2)
  stim2r <- Filter(stim2,resp2)

  statsrt1  <- SummaryStats(rt1r,stim1r)
  statsrt2  <- SummaryStats(rt2r,stim2r)

   FilePrint(gSumFileOut,"-----------------------------------------------")
   FilePrint(gSumFileOut,"PEBL Go-No-Go Task, Version 1.0")
   FilePrint(gSumFileOut,"http://pebl.sf.net")
   FilePrint(gSumFileOut,"Shane T. Mueller")
   FilePrint(gSumFileOut, GetPEBLVersion())
   FilePrint(gSumFileOut, GetSystemType())
   FilePrint(gSumFileOut,"-----------------------------------------------")
   FilePrint(gSumFileOut,"Screen width x height: " +gVideoWidth+ "x"+gVideoHeight)
   FilePrint(gSumFileOut, "Subject code: "+gSubNum)
   FilePrint(gSumFileOut, "Time:         "+TimeStamp())
   FilePrint(gSumFileOut,"-----------------------------------------------")

   FilePrint(gSumFileOut,"Total Correct:          "+Sum(Merge(err1,err2)))
   FilePrint(gSumFileOut,"Total Errors:           "+(Length(Merge(err1,err2))-Sum(Merge(err1,err2))))

   FilePrint(gSumFileOut,"Mean Accuracy:          "+(Mean(Merge(err1,err2))))
   FilePrint(gSumFileOut,"Mean Error:             "+(1-Mean(Merge(err1,err2))))
  FilePrint(gSumFileOut, "                 ROUND 1 Errors         ")
   FilePrint(gSumFileOut,"----------------------------------------")
   FilePrint(gSumFileOut,"Cond    N       median  mean    sd")
   FilePrint(gSumFileOut,"----------------------------------------")
   loop(i,statserr1)
    { 
     tmp <- ""
      loop(j,i)
       {
         tmp <- tmp + Format(j,7) + " " 
       }
      FilePrint(gSumFileOut,tmp)
     }
  FilePrint(gSumFileOut, "              ROUND 2 Errors            ")
   FilePrint(gSumFileOut,"----------------------------------------")
   FilePrint(gSumFileOut,"Cond    N       median  mean    sd")
   FilePrint(gSumFileOut,"----------------------------------------")
   loop(i,statserr2)
    { 
     tmp <- ""
      loop(j,i)
       {
         tmp <- tmp + Format(j,7) + " " 
       }
      FilePrint(gSumFileOut,tmp)
     }
   FilePrint(gSumFileOut,"----------------------------------------"+CR(2))

   FilePrint(gSumFileOut,"Round 1 Response time")
   FilePrint(gSumFileOut,"----------------------------------------")
   FilePrint(gSumFileOut,"Cond    N       median  mean    sd")
   FilePrint(gSumFileOut,"----------------------------------------")
   loop(i,statsrt1)
    { 
     tmp <- ""
      loop(j,i)
       {
         tmp <- tmp + Format(j,7) + " " 
       }
      FilePrint(gSumFileOut,tmp)
     }
   FilePrint(gSumFileOut,"----------------------------------------"+CR(2))

   FilePrint(gSumFileOut,"Round 2 Response time")
   FilePrint(gSumFileOut,"----------------------------------------")
   FilePrint(gSumFileOut,"Cond    N       median  mean    sd")
   FilePrint(gSumFileOut,"----------------------------------------")
   loop(i,statsrt2)
    { 
     tmp <- ""
      loop(j,i)
       {
         tmp <- tmp + Format(j,7) + " " 
       }
      FilePrint(gSumFileOut,tmp)
     }

  ##Save some coarse data to a pooled file, one line per subject.
   FilePrint_(gPooledSummary,gSubNum+","+TimeStamp()+","+GetTime() + "," +
       Sum(Merge(err1,err2))+","+(1-Mean(Merge(err1,err2)))+",")
   tmp <- Nth(Transpose(statserr1),4)
   FilePrint_(gPooledSummary,First(tmp)+","+Second(tmp))
   tmp <- Nth(Transpose(statserr2),4)
   FilePrint_(gPooledSummary,First(tmp)+","+Second(tmp))
   tmp <- Nth(Transpose(statsrt1),4)
   FilePrint_(gPooledSummary,First(tmp)+","+Second(tmp))
   tmp <- Nth(Transpose(statsrt2),4)
   FilePrint(gPooledSummary,First(tmp)+","+Second(tmp))
  ##Debrief at the end. 
  MessageKeyBox(gDebrief)
}


define DoBlock(trials,correctresponse,type)
{

  linecol <- MakeColor("darkgrey")
  color <- MakeColor("blue")
  sizegrid <- 200
  xhome <- gVideoWidth/2
  yhome <- gVideoHeight/2
   xs <- [xhome-sizegrid/2,xhome+sizegrid/2,xhome-sizegrid/2,xhome+sizegrid/2]
   ys <-[yhome-sizegrid/2,yhome-sizegrid/2,yhome+sizegrid/2,yhome+sizegrid/2]

  xys <- Transpose([xs,ys])

   ##Make the grid
   lines <- [ThickLine(xhome-sizegrid,yhome-sizegrid,xhome+sizegrid,yhome-sizegrid,5,linecol)]
   lines <- Append(lines,ThickLine(xhome-sizegrid,yhome,xhome+sizegrid,yhome,5,linecol))
   lines <- Append(lines,ThickLine(xhome-sizegrid,yhome+sizegrid,xhome+sizegrid,yhome+sizegrid,5,linecol))
 
   lines <- Append(lines,ThickLine(xhome-sizegrid,yhome-sizegrid,xhome-sizegrid,yhome+sizegrid,5,linecol))
   lines <- Append(lines,ThickLine(xhome,yhome-sizegrid,xhome,yhome+sizegrid,5,linecol))
   lines <- Append(lines,ThickLine(xhome+sizegrid,yhome-sizegrid,xhome+sizegrid,yhome+sizegrid,5,linecol))

  AddObjects(lines,gWin)

   stars <- []
    pts <- MakeStarPoints(40,20,6) 
  loop(xy, xys)
     {
    
          shape <- Polygon(First(xy),Second(xy),First(pts),Second(pts),color,1)
           AddObject(shape,gWin)
          stars <- Append(stars,shape)
     }
  head <- EasyLabel(gLab +correctresponse,xhome,20, gWin,30)

  stim <- EasyLabel("",xhome,yhome, gWin,40)
  Hide(stim)


  #Wait some unspecified duration
  timenow <- GetTime()
  timeend <- timenow
  trial <- 1
  loop(i,trials)
  {

     timeend <- timeEnd + gisi
     choice <- RandomDiscrete(4)
     xy <- Nth(xys,choice)
     Move(stim,Round(First(xy)),Round(Second(xy)))
     star <- Nth(stars,choice)
     Hide(star)      
     stim.text <- i 
     Show(stim)
     Draw()
     starttime <- GetTime()
	 gStimOn <- 1
	 ##make the stimulus disappear after 500 ms
     RegisterEvent("<TIMER>", 1, starttime+500,"<GEQ>","HIDEME", [stim,star])
     resp <- WaitForListKeyPressWithTimeout(["<lshift>","<rshift>"],1450,1)
     endtime <- GetTime()
	 HideMe(stim,star)
     

     if(IsList(resp))
        {
           resp <- "NONE"
        }

	  ##RECODE Whether they responded
      if(resp=="NONE")
       {
	   responded <- 0
	   } else
       {responded <- 1
       }
 

      if(i == correctresponse)
         {
            present <- 1
         } else {
            present <- 0
         }
        

       corr <- ((responded and (correctresponse==i)) or 
               ((not responded) and (not (correctresponse==i))))

       ##Give feedback if this was practice.
	   if(type=="practice")
	   {
         if(corr==0)
         {
           stim.text <- "X"
		   Show(stim)
		   Draw()
		   Wait(1000)
		   Hide(stim)
		   Draw()
         }
       }	   
	   outline <- gSubNum+","+gBlock+","+type+","+correctresponse+","+trial+","+choice+","+First(xy)+","+Second(xy)+","+i+","+present+","+resp+","+responded+","+starttime + ","+(endtime-starttime)
	   FilePrint(gFileOut,outline)
	   FilePrint(gPooledFileOut,outline)

	   ##Append some data
	   gBlockNums <- Append(gBlockNums,gBlock)
	   gRTs	      <- Append(gRTs,(endtime-starttime))
	   gErrors    <- Append(gErrors, corr)
       gStim     <-  Append(gStim,i)
       gResponded <- Append(gResponded,responded)

	   trial<-trial + 1
	   WaitUntil(timeend)
 }
   Draw()
}


define AddObjects(list,win)
{
   loop(i,list)
    {
      AddObject(i,win)
    }
}



define GetStrings(lang)
{


 if(Uppercase(lang)=="EN")
   {
	gInst1 <- "In this task, you  will see a series of 'P's and 'R's on the screen. Whenever you see a 'P', respond by pressing the right shift key on the keyboard.  DO NOT RESPOND when you see an 'R'.  Most of the letters you see will be 'P's. You will begin with a few practice trials.  Press the right shift key to begin."
	gInst2 <- "Now, you will do the task for real. You will no longer be told when you make an error. Press any key to begin."
	gInst3 <- "You may take a short break before you continue.  In the second half of this study, the mapping will reverse.  This time, hit the right shift key only when you see the 'R', but not when you see a 'P'. Once again, most of the letters you see will  be 'P's. You will begin with a few practice trials.  Press the right shift key to begin."
	gLab <- "Press <shift> for "
    gDebrief <- "Thank you for participating. "

  } elseif(Uppercase(lang)=="PT") {


	gInst1 <- "Neste teste, irÃ¡ ver uma sÃ©rie de 'P's e 'R's no ecrÃ£. Sempre que surguir um 'P', responda pressionando a tecla Enter no teclado. NÃƒO RESPONDA quando surguir um 'R'.  A maioria das letras serÃ£o 'P's. Vai iniciar com alguns ensaios de prÃ¡tica. (Carregue na tecla Enter para comeÃ§ar)."
	gInst2 <- "Agora, jÃ¡ sabe o que fazer nesta tarefa. Vai tambÃ©m deixar de ser avisado quando cometer um erro. (Carregue na tecla Enter para comeÃ§ar)."
	gInst3 <- "Vai agora fazer um intervalo. Na segunda parte deste teste a regra vai mudar. Agora, vai carregar na tecla enter apenas quando surguir no ecrÃ£ um 'R' NÃƒO RESPONDA quando surguir um 'P'. Mais uma vez, a maioria das letras serÃ£o 'P's. Vai iniciar com alguns ensaios de prÃ¡tica. (Carregue na tecla Enter para comeÃ§ar)."
	gLab <- "Carregue Enter para "
    gDebrief <- "Final. Bateria DPSM-HF "

   } elseif(Uppercase(lang)=="HR") {
    ##By Silvija  Rucevic

	gInst1 <- "U ovom zadatku vidjet cete niz slova P i R na ekranu. Svaki put kada vidite slovo P pritisnite tipku SHIFT. NE ODGOVARAJTE kada vidite slovo R. Vecina slova koje cete vidjeti su slova P. Zapocet cete s nekoliko zadataka za uvjezbavanje. Pritisnite tipku SHIFT za pocetak."
	gInst2 <- "Sada cete zapoceti s zadatkom za stvarno. Vise necete dobiti informaciju kada ste pogrijesili. Pritisnite bilo koju tipku za pocetak."
	gInst3 <- "Mozete se malo odmoriti prije nego li nastavite. U drugom dijelu zadatka radit cete obrnuto. Ovaj put pritisnite tipku SHIFT kada vidite slovo R, ali ne kada vidite slovo P. Ponovno, vecina slova koju vidite bit ce slova P. Zapocet cete s nekoliko zadataka za uvjezbavanje. Pritisnite tipku SHIFT za pocetak."
	gLab <- "Pritisite tipku shift za "
    gDebrief <- "Hvala vam na sudjelovanju "

    }else {
    GetStrings("EN")
  }
}


define MessageKeyBox(message)
{

  tb <- EasyTextBox(message,100,100,gWin,28,gVideoWidth-200,gVideoHeight-200)
  Draw()
  WaitForAnyKeyPress()
  RemoveObject(tb,gWin)

}


define WaitUntil(time)
{
    
     RegisterEvent("<TIMER>", 1, time,"<GEQ>","", [])
     StartEventLoop()  #Start the timer
     ClearEventLoop()  #clear it out when done.
   
}

define HideMe(stim,star)
{
  if(gStimOn)
  {
     Hide(stim)
     Show(star)
	 gStimOn <- 0
	 Draw()
  }}
 
