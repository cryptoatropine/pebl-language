#################################################
## The PEBL Dot Judgment Task
##
##
##  designed, loosely, after one described by:
##
##
##Damos, D. L. (1986). Development of a Computer-Based Naval Aviation
##   Selection Test Battery. NAVAL AEROSPACE MEDICAL RESEARCH LAB PENSACOLA
##   FL.
##
##
##
##  As described by Damos, the task is not very interesting.  Once you 
##  get beyond 10-15 points, you are essentially guessing. Thus, it
##  is modified in order to determine JND thresholds for 10,20,30,40 points,
##  using and interleaved staircase procedure.
##
##
##  Version 1.0, Released 2011 Shane T Mueller, Ph.D.
##  http://pebl.sf.net
##  smueller@obereed.net
##  
#################################################

define Start(p)
{

  parpairs <- [["repsperblock",25],
                ["numblocks",4],
               ["resetthresh",1],  ##reset threshold to average threshold on each block.
               ["prestime",-1],
               ["base1",6],
	       ["base2",20],
	       ["base3",50],
	       ["base4",100],
	       ["thresh1",4],
	       ["thresh2",4],
	       ["thresh3",4],
	       ["thresh4",4],
	       ["errorAdj",1],
	       ["correctAdj",-.25],
               ["fieldsize",450],
	       ["border",100],
	       ["dotcolor","red"],
	       ["dotfilled",1],
	       ["dotradius",10],
	       ["useAudioFeedback",1],
               ["responsetype","keyboard"]  ##currently, changing this has no effect.
              ]


   gParams <- CreateParameters(parpairs,gParamFile)

    base <- [gParams.base1,gParams.base2,gParams.base3,gParams.base4]
    thresholds <-[gParams.thresh1,gParams.thresh2,gParams.thresh3,gParams.thresh4]

   gWin <- MakeWindow("black")

   Initialize()

   ##Get subject code if we need to:    
   if(gSubNum==0)
    {
      gSubNum <- GetSubNum(gWin)
    }

   ##Make data files   


   gFileOut <- GetNewDataFile(gSubNum,gWin,"dots","csv", "subnum,block,trial,practice,standard,thresh,side,corr,abstime,rt")
   gPooledFileOut <- FileOpenAppend("data/dots-pooled.csv")
   gSumFileOut <- GetNewDataFile(gSubNum,gWin,"dots-summary","txt","")
   gLog <- FileOpenAppend("data/dots-log.csv")
   gPooledSummary <- FileOpenAppend("data/dots-all.csv")

   ##Add headers onto files.
   flen <- Length(FileReadList("data/dots-pooled.csv"))
   header <- "subnum,block,trial,practice,standard,thresh,side,corr,abstime,rt"

   if(flen==0)
    { 
      Print("empty pooled data file.  Adding header")
      FilePrint(gPooledFileOut, header)
    }

   FilePrint(gFileOut,header)

	
   FilePrint(gLog, gSubNum + "," + gLanguage + "," +  TimeStamp()+",DOTS TASK,"+gResponseType+",INITIATED") 
   DoInstructions()
   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",DOTS TASK,"+gResponseType+",PRACTICE BEGIN") 



   if(gParams.UseAudioFeedback)
   {
     gCorrectSound <- LoadSound("correct.wav")
     gIncorrectSound <-LoadSound("buzz500ms.wav")
   }

    ##Set up some data holders
    dataBaseVals <-   []
    dataThresh <- []
    gRTs        <- []
    gCorr <- []
    gRunningCorr <- []


    gTrial <- 1

    ##Run several blocks, between which you get a break and 
    ##can reset threshold

    loop(gBlock,Sequence(1,gParams.numblocks,1))
    {

     design <- Shuffle(RepeatList([1,2,3,4],gParams.repsperblock))
     blockBaseVals <- []
     blockThresh  <- []
     loop(type,design)
     {

      thresh <- Nth(thresholds,type)	  
      newthresh <- Trial(Nth(base,type),thresh,1)
      SetElement(thresholds,type,newthresh)		
      PushOnEnd(blockBaseVals, Nth(base,type))
      PushOnEnd(blockThresh, thresh)
      gTrial <- gTrial + 1

     }    

   Print(thresholds)
    ##Reset threshold to average of previous threshold for each base value
   if(gParams.resetthresh)
    {  
        thresholds <- []
        loop(i,base)
        { 

             tmpthresh <- Filter(blockThresh,Match(blockBaseVals,i))
             PushOnEnd(thresholds, Median(tmpthresh))
        }
     }

    dataBaseVals <- Merge(dataBaseVals,blockBaseVals)
    dataThresh <- Merge(dataThresh,blockThresh)


    if(gBlock <gParams.numblocks)
     {
         MessageBox("You may take a short break before continuing.", gWin)
     }
   }
  

   FilePrint(gSumFileOut,"-----------------------------------------------")
   FilePrint(gSumFileOut,"PEBL Dots Task, Version 1.0")
   FilePrint(gSumFileOut,"http://pebl.sf.net")
   FilePrint(gSumFileOut,"Shane T. Mueller")
   FilePrint(gSumFileOut, GetPEBLVersion())
   FilePrint(gSumFileOut, GetSystemType())
   FilePrint(gSumFileOut,"-----------------------------------------------")


   FilePrint(gSumFileOut, "Subject code: "+gSubNum)
   FilePrint(gSumFileOut, "Time:         "+TimeStamp())
   FilePrint(gSumFileOut,"Reps per block: "+gParams.repsPerBlock  )
   FilePrint(gSumFileOut,"Blocks:      "+gParams.numBlocks  )

   FilePrint(gSumFileOut,"fieldsize:   "+gParams.fieldsize)
   FilePrint(gSumFileOut,"dotcolor:   "+gParams.dotcolor)
   FilePrint(gSumFileOut,"dotfilled:   "+gParams.dotfilled)
   FilePrint(gSumFileOut,"dotradius:   "+gParams.dotradius)
   FilePrint(gSumFileOut,"-----------------------------------------------")
   FilePrint(gSumFileOut,"                      Thresholds  ")
   FilePrint(gSumFileOut,"Base value       Mean     Last half     Final " )
   FilePrint(gSumFileOut,"-----------------------------------------------")

   meanthreshs <- []
   ##compute average threshold for each base value
   loop(i,base)
   {
     filter <- Match(dataBaseVals,i)
     threshs <- Filter(dataThresh,filter)
     lasthalf <- SubList(threshs,Floor(Length(threshs)/2),Length(threshs))
     FilePrint(gSumFileOut,i+ "               " + Mean(threshs)+ "      "+Mean(lasthalf)+"             "+ Last(threshs))
     PushOnEnd(meanThreshs,Mean(threshs))
   }
   FilePrint(gSumFileOut,"-----------------------------------------------")

   datalist <- Flatten([Mean(gCorr),Mean(gRTS)])
   FilePrint(gSumFileOut,datalist)           

   FilePrint_(gPooledSummary,gSubNum+","+TimeStamp())
   loop(i,meanthreshs)
      {  
        FilePrint_(gPooledSummary,","+i)
      }

   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",dots ,"+gResponseType+",EXPERIMENT COMPLETE") 

  MessageKeyBox(gDebrief)

}

define Trial(stim,thresh,practice)
{

  
   ClearEventLoop()
   time0 <- GetTime()
   ##add the fixation right away.
   header <- EasyLabel("Which field has more dots?",gVideoWidth/2,22,gWin,30)
   footer <- EasyLabel(gFooterL+"          "+gFooterR,gVideoWidth/2,gVideoHeight-100,gWin,40)

   order <- Sample([1,-1])

   fieldsize <- gParams.fieldsize
   border <- gParams.border

   if(order==1)
      {  ##higher on right


       layoutl <- LayoutPoints(gVideoWidth/2-fieldsize-border/2,
                                    gVideoWidth/2-border/2,
                                    border,
                                    fieldsize+border,Floor(stim+thresh))

       layoutr <- LayoutPoints(gVideoWidth/2+border/2,
                                     gVideoWidth/2+fieldsize+border/2,
                                     border,
                                     fieldsize+border,Floor(stim))


     } else {


        layoutl <- LayoutPoints(gVideoWidth/2-fieldsize-border/2,gVideoWidth/2-border/2,border,fieldsize+border,stim)
       layoutr <- LayoutPoints(gVideoWidth/2+border/2,gVideoWidth/2+fieldsize+border/2,border,fieldsize+border,Floor(stim+thresh))

     }

	 back1 <-Rectangle(gVideoWidth/2-border/2-fieldsize/2,
                           border+fieldsize/2,
            fieldsize+gParams.dotradius*2,fieldsize+gParams.dotradius*2,MakeColor("darkgrey"),1)
  	 back2 <-Rectangle(gVideoWidth/2+border/2+fieldsize/2,border+fieldsize/2,
            fieldsize+gParams.dotradius*2,fieldsize+gParams.dotradius*2,MakeColor("darkgrey"),1)

	 AddObject(back1,gWin)
	 AddObject(back2,gWin)
	 dots <- []
	 loop(i,Merge(layoutl,layoutr))
         {

	      dot <-  Circle(First(i),Second(i),gParams.dotradius,MakeColor(gParams.dotcolor),gParams.dotfilled)
	      AddObject(dot,gWin)
	      dots <- Append(dots,dot)
         }

        timeb <- GetTime()
        elapsed <- timeb-time0
	##make the timing pre-presentation more similar
        Wait(200-elapsed)

	Draw()
    time2 <- GetTime()
    gStimOn <- 1

    if(gParams.prestime>0)
    {
      RegisterEvent("<TIMER>", 1, time2+gParams.prestime,"<GEQ>","HIDEME", [dots])
    }
	resp <- WaitForListKeyPress(["<lshift>","<rshift>"])
	time3 <- GetTime()
	
    corr <- ((order ==-1) and (resp == "<rshift>")) or 
            ((order ==1) and (resp == "<lshift>")) 
    rt <- time3-time2

   gRunningCorr <- Append(gRunningCorr,corr)
   if(Length(gRunningcorr)>10)
   {
     gRunningcorr <- SubList(gRunningCorr,2,11)
   }

     if(corr)
      {  
              header.text  <- "Correct   ["+rt+"] "+ thresh
            } else {
              header.text  <- "Incorrect ["+rt+"] "+ thresh
            }
	Show(header)
	Draw()

     if(gParams.UseAudioFeedback)
      {
       if(corr)
        {
          PlayForeground(gCorrectSound)
        }else{
          PlayForeground(gIncorrectSound)
        }
      }else{
	Wait(400)
      }



   Draw()
   dataline <- gSubNum + ","+ gBlock + "," +gTrial+","+practice + ","+  stim +","+thresh+","+order+","+
   corr + ","+time2+","+rt
               
   FilePrint(gFileOut,dataline)
   FilePrint(gPooledFileOut,dataline)

   PushOnEnd(gRTs,rt)
   PushOnEnd(gCorr,corr)
   
  RemoveObjects(dots,gWin)

   ##In this staircase, we have a probability of staying regardless of
   ##correct/incorrect.  Set to 0 if you want to ignore it.
   if(corr)
      {
     newthresh <- Max([1,(thresh +gParams.correctAdj)])
   } else {
     newthresh <- thresh+gParams.errorAdj
   }

 return newthresh
}



define RemoveObjects(list,win)
{
	loop(i,list)
    {
	   if(IsList(i)  )
 	     {
		   RemoveObjects(i,win)
         }else{
           RemoveObject(i,win)
         }
    }
}


define ShowAll(list,hideshow)
{
   loop(i,list)
   {
     i.visible <- hideshow
   }
}


##This creates a full factorial design with each sublist of list 
##as a factor.
define CrossFactors(list)
{
     
  factors <- First(list)
  size <- 2
  loop(factor,SubList(list,2,Length(list)))
  {
     tmp <-DesignFullCounterbalance(factors,factor)
	 factors <- FoldList(Flatten(tmp),size)
	 size <- size + 1
  }
  return factors
}






define GetStrings(language)
{
   if(Uppercase(language)=="EN")
    {
       gInst1text <- "This study will test how you both use and ignore information in order to make a decision.  In this task, you will be asked to determine the direction of the center arrow, in a set of five.  If it is pointing left, press the left shift key.  If it is to the right, press the right shift key.  The heads of the arrows surrounding the center arrow will either be in same direction, the opposite direction, will be absent, and only appear as lines.  You will always ignore the surrounding symbols, and respond only to the central arrow.  Some example stimuli are shown below.  Press any key to continue."

       gInst3text  <- "You will start with a short block of practice trials.  After each trial, you will be told whether you are correct, and told how long you took to make the response (in thousandths of a second).  To to respond as quickly and accurately as possible.  Remember, use the left and right shift keys to respond.  Press any key to begin."

       gFooterl <- "left-shift"
	   gFooterr <- "right-shift"
       gInterblock <- "Take a short break.  Hit any key to begin the next block."
       gDebrief <- "Thank you for participating in the study.  Alert the researcher that you are done."
         
    } else {
       ##Fallback to english
       GetStrings("EN")
    }

}



define Initialize()
{


  gResponseType <-gParams.responsetype  ##currently, changing this has no effect.
  gSleepEasy <- 1
  GetStrings(gLanguage) 
  ShowCursor(0)

  MakeDirectory("data")
   

}




define MessageKeyBox(message)
{

  tb <- EasyTextBox(message,100,100,gWin,28,gVideoWidth-200,gVideoHeight-200)
  Draw()
  WaitForAnyKeyPress()
  RemoveObject(tb,gWin)

}

define DoInstructions()
{
  MessageBox("In this task, you will have to judge whether there are more dots on the left side or right side of the screen.  You will respond my hitting either the left or right shift key.  The dots will only appear for a short time, to prevent you from counting them.  Judge as well as you can without counting, even if the dots have disappeared from the screen.  Respond as quickly and accurately as possible.

Click OK to begin.",gWin)
}



define WaitUntil(time)
{
    
     RegisterEvent("<TIMER>", 1, time,"<GEQ>","", [])
     StartEventLoop()  #Start the timer
     ClearEventLoop()  #clear it out when done.
   
}

define HideMe(stim)
{
  if(gStimOn)
  {
     ShowAll(stim,0)
	 gStimOn <- 0
	 Draw()
  }
}

##puts item into position on list
define SpliceList(list,item,pos)
{
  i <- 1
  tmp <- []
  loop(itm,list)
  {
     if(i==pos)
	  {
	    itm <- item
      }
    tmp <- Append(tmp,itm)
   i <- i + 1
  }
  return tmp
}



# ##  Make num points within region xmin.xmax,ymin.ymax
# ##  and be sure that no two are identical.
# ##
define LayoutPoints(xmin, xmax, ymin, ymax,  num)
 {
 
    ##Note that it is possible to arrange the situation 
    ## so that the distribution will never be satisfied.  So, lets
    ## set up a 'limit' at which point we give up and return the best
    ## we have so far.
    limit <- 10

    ## First, just initialize num points.
    pts <- []

    tries <- 1
    while(Length(pts)<num and tries <limit)
    {

     i <- Length(pts)+1
     while(i <= num)
     {

      x <- Round(xmin + Random()*(xmax-xmin))
      y <- Round(ymin + Random()*(ymax-ymin))
      PushOnEnd(pts,[x,y])
      i <- i + 1
     }
     pts <- RemoveDuplicates(pts)
     tries <- tries  + 1
    }

   return Shuffle(pts)
 }


define RemoveDuplicates(pts)
{
  tp <- Transpose(pts)
  pts <- SortBy(pts,Second(tp))
  tp <- Transpose(pts)
  pts <- SortBy(pts,First(tp))

  newPts <- [First(pts)]
  loop(i,Sequence(2,Length(pts),1))
    {
     if(PairEqual(Nth(pts,i),Nth(pts,i-1)))
      {
       #skip
      }else {
        PushOnEnd(newpts,Nth(pts,i))
      }

    }

  return newpts

}


define PairEqual(p1,p2)
{
   return (First(p1)==First(p2)) and (Second(p1)==Second(p2))
}
